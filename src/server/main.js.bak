const express = require("express");
const ViteExpress = require("vite-express");
const bodyParser = require('body-parser');
const User = require('./models/user');
const jwt = require('jsonwebtoken');
const connection = "mongodb://127.0.0.1:27017/helpdesk";
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const LocalStrategy = require('passport-local').Strategy;
const connectEnsureLogin = require('connect-ensure-login');
const session = require('express-session');
const passport = require("passport");

const sessionSecret = 'keyboard cat';
mongoose.connect(connection, {useNewUrlParser: true, useUnifiedTopology: true})
    .then(() => console.log('Connected!'));
const app = express();

// const certPath = path.join(__dirname, '../../localhost.pem');
// const keyPath = path.join(__dirname, '../../localhost-key.pem');
// const cert = fs.readFileSync(certPath);
// const key = fs.readFileSync(keyPath);
// const server = https.createServer({key: key, cert: cert}, app);
// app.use((err, req, res, next) => {
//     console.error(err);
//     res.status(500).send('Internal Server Error');
// });

app.use(express.json());
app.use(bodyParser.urlencoded({extended: false}));
app.use(session({
    secret: sessionSecret, resave: false, saveUninitialized: true, cookie: {maxAge: 60 * 60 * 10000}
}));
app.use(passport.initialize());
app.use(passport.session());
passport.use(User.createStrategy());
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());
// Register
app.post('/register', (req, res) => {
    User.register({email: req.body.email, username: req.body.username}, req.body.password, function (err, user) {
        if (err) {
            console.log(err);
            res.status(500).send("Error registering new user please try again.");
        } else {
            res.status(200).send("Successfully registered user");
        }
    });
});

// Login by checking if the hashed password matches the one in the database
app.post('/loginapi', passport.authenticate('local', {failureRedirect: '/'}), function (req, res) {
    req.session.username = req.user.username;
    console.log("Login successful");
    res.status(200).send("Login successful");
});

// Logout
app.get('/logout', (req, res) => {
    req.logout();
    res.status(200).send("Logout Successful")
});

app.get('/authstatus', (req, res) => {
    if (req.isAuthenticated()) {
        // User is authenticated
        res.status(200).json({authenticated: true, user: req.user});
    } else {
        // User is not authenticated
        res.status(401).json({authenticated: false});
    }
});


// Facebook login
const FacebookStrategy = require('passport-facebook').Strategy;
passport.use(new FacebookStrategy({
    clientID: '687400556241089',
    clientSecret: '0fb111abb0bec2f61575f34c4c61ede7',
    callbackURL: 'https://localhost:3000/auth/facebook/callback',
    profileFields: ['id', 'displayName', 'emails']
}, (accessToken, refreshToken, profile, done) => {
    FacebookUser.findOne({facebookId: profile.id}, (err, user) => {
        if (err) return done(err);

        if (user) {
            // If the user exists, return the user object
            return done(null, user);
        } else {
            const newUser = new FacebookUser({
                facebookId: profile.id,
                name: profile.displayName,
                email: profile.emails ? profile.emails[0].value : null
            });

            newUser.save((err) => {
                if (err) return done(err);
                return done(null, newUser);
            });
        }
    });
}));

passport.serializeUser((user, done) => {
    done(null, user.id);
});
passport.deserializeUser((id, done) => {
    FacebookUser.findById(id, (err, user) => {
        done(err, user);
    });
});
app.get('/auth/facebook', passport.authenticate('facebook'));
app.get('/auth/facebook/callback', passport.authenticate('facebook', {
    successRedirect: '/agentscreen', failureRedirect: '/login'
}));

// Use socket.io to implement the live chat stuff


// server.listen(3000, () => {
//     console.log('Listening on port 3000');
// });
//
// ViteExpress.bind(app, server).then(r => {
//     if (r) {
//         console.log("ViteExpress ready");
//     }
// });
ViteExpress.listen(app, 3000, () => console.log("Server is listening on port 3000..."));
